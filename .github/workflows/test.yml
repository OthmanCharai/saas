name: Test Laravel

on:
  push:
  pull_request:

jobs:
  phpunit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.0']

    name: PHPUnit (PHP ${{ matrix.php-versions }})
    env:
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug

    - name: Start mysql service
      run: sudo /etc/init.d/mysql start

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache composer dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        # Use composer.json for key, if composer.lock is not committed.
        # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Prepare the application
      run: |
        php artisan key:generate
        chmod -R 777 storage bootstrap/cache
 
    - name: Clear Config
      run: php artisan config:clear
    
    - name: Run Migration
      run: php artisan migrate -v
      env:
        DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        REDIS_PORT: ${{ job.services.redis.ports['6379'] }} 

    - name: Test with phpunit
      run: vendor/bin/phpunit --coverage-text
      env:
        DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        REDIS_PORT: ${{ job.services.redis.ports['6379'] }}        